<?php

/**
 * @file
 * Contains contextly.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\contextly\Contextly\ContextlyDrupalKit;
use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_page_attachments().
 *
 * Add contextly meta tags to html head.
 */
function contextly_page_attachments(array &$page) {
  $route_match = \Drupal::service('current_route_match');
  if ($route_match->getRouteName() === 'entity.node.canonical' &&
    $node = $route_match->getParameter('node')) {
    $meta_generator = \Drupal::service('contextly.meta_generator');
    $meta_generator->createMetaTags($node);

    $contextly = [
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => [
        'name' => 'contextly-page',
        'id' => 'contextly-page',
        'content' => json_encode($meta_generator->getMetaTags()),
      ],
    ];
    $page['#attached']['html_head'][] = [$contextly, 'contextly-page'];
  }
}

/**
 * Implements hook_preprocess_page().
 *
 * Add contextly libraries to page.
 */
function contextly_preprocess_page(array &$variables) {
  if (\Drupal::routeMatch()->getRouteName() === 'entity.node.canonical' &&
    !empty($variables['node']) &&
    $variables['node']->bundle() === 'article') {
    $variables['#attached']['library'][] = 'contextly/contextly.head';
    $variables['#attached']['library'][] = 'contextly/contextly.ready';
  }
}

/**
 * Implements hook_theme().
 */
function contextly_theme() {
  return [
    'contextly_node' => [
      'template' => 'contextly-node',
    ],
    'contextly_snippet_edit' => [
      'template' => 'contextly-snippet-edit',
    ],
    'contextly_node_edit' => [
      'render element' => 'children',
    ],
  ];
}

/**
 * Implements hook_node_update().
 */
function contextly_node_update(EntityInterface $node) {
  /** @var \Drupal\contextly\ContextlyBaseServiceInterface $contextly_base */
  $contextly_base = \Drupal::service('contextly.base');
  $contextly_base->nodeChanged($node);
  $contextly_base->saveNodeRevisionSettings($node);
}

/**
 * Implements hook_node_insert().
 */
function contextly_node_insert(EntityInterface $node) {
  contextly_node_update($node);
}

/**
 * Implements hook_node_revision_delete().
 */
function contextly_node_revision_delete(EntityInterface $node) {
  /** @var \Drupal\Core\Database\Query\Delete $query */
  $query = \Drupal::service('database')->delete('contextly_node_settings');
  $query->condition('vid', $node->getRevisionId())->execute();
}

/**
 * Implements hook_node_delete().
 */
function contextly_node_delete(EntityInterface $node) {
  /** @var \Drupal\Core\Database\Query\Delete $query */
  $query = \Drupal::service('database')->delete('contextly_node_settings');
  $query->condition('nid', $node->id())->execute();
}

/**
 * Implements hook_library_info_build().
 */
function contextly_library_info_build() {
  return [];
  /** @var \Drupal\contextly\ContextlyBaseServiceInterface $contextly_base */
  $contextly_base = \Drupal::service('contextly.base');
}

/**
 * Implements hook_form_FORM_ID_alter() for node_form().
 *
 * Adds edit elements to the node edit form.
 */
function contextly_form_node_form_alter(&$form, FormStateInterface $form_state) {
  //dsm($form);
    /** @var \Drupal\Core\Entity\EntityForm $form_object */
  $form_object = $form_state->getFormObject();
  /** @var \Drupal\node\NodeInterface $node */
  $node = $form_object->getEntity();
  if ($node->isNew()) {
    // @todo: message form after build.
    return;
  }

  /** @var \Drupal\contextly\ContextlyBaseServiceInterface $base_service */
  $base_service = \Drupal::service('contextly.base');
  
  // Make sure that API key is set.
  $key = $base_service->getApiKey();
  if (empty($key)) {
    return;
  }

  // Check if node type is enabled.
  //if (!_contextly_is_node_type_enabled($node->type)) {
  //  return;
  //}

  //$has_access = user_access('manage contextly links');

  // Add per-post settings (even if user has no access to edit links).
  $form['contextly'] = array(
    '#type' => 'details',
    '#group' => 'advanced',
    '#attributes' => [
      'class' => ['node-form-contextly'],
    ],
    '#title' => t('Contextly widgets'),
    '#weight' => 50,
    '#attached' => [
      'library' => ['contextly/node-form'],
      //'drupalSettings' => \Drupal::service('contextly.base')
      //    ->getSettings($node),
    ],
  );
  $form['contextly']['contextly_disabled'] = array(
  '#type' => 'checkbox',
    '#disabled' => !$has_access,
    '#title' => t('Disable the recommendation module and all sidebars on this node'),
    '#default_value' => !empty($node->contextly_disabled),
  );

  $form['contextly']['contextly_snippet_edit'] = array(
    '#theme' => 'contextly_node_edit',
  );

  // Stop at this point if user has no access.
  //if (!$has_access) {
    //return;
  //}

  // For now we support node edit only.
  if (empty($node->nid)) {
    // Instead of showing the message now we add after build handler to check
    // if the form was submitted and show the message if it wasn't. We can't do
    // it here, because "process_input" form state variable is not set yet.
    $form['#after_build'][] = '_contextly_create_node_form_after_build';
    return;
  }

  $form['#attached']['library'][] = 'contextly/editor';
  $form['#attached']['drupalSettings'] = $base_service->getSettings($node);

}
